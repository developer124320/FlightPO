

def d2b(a,b=0):
# "a" any decimal number between 0 to 255.
# "b" is reserved, but for my usage is very useful, see above... ;o)
# Don't allow any floating point numbers.
	a=int(a)
	b=int(b)
	decimal=a+b
	newbyte = None
	# Out of range checks forcing function to exit!
	if decimal<=-1 or decimal>=256:
		if decimal >255:
			n = int(decimal / 256)
			decimal = decimal - 256 * n
		# print("\nError in d2b(a,b=0) function, decimal integer out of range, (0 to 255)!\n")
		# FORCE a Python error to stop the function from proceeding; "FORCED_HALT" IS NOT DEFINED!
		# print(FORCED_HALT)
	# Convert new decimal value 0 to 255 to b"\x??" value.
	if decimal==0: newbyte=b"\x00"
	elif decimal==1: newbyte=b"\x01"
	elif decimal==2: newbyte=b"\x02"
	elif decimal==3: newbyte=b"\x03"
	elif decimal==4: newbyte=b"\x04"
	elif decimal==5: newbyte=b"\x05"
	elif decimal==6: newbyte=b"\x06"
	elif decimal==7: newbyte=b"\x07"
	elif decimal==8: newbyte=b"\x08"
	elif decimal==9: newbyte=b"\x09"
	elif decimal==10: newbyte=b"\x0A"
	elif decimal==11: newbyte=b"\x0B"
	elif decimal==12: newbyte=b"\x0C"
	elif decimal==13: newbyte=b"\x0D"
	elif decimal==14: newbyte=b"\x0E"
	elif decimal==15: newbyte=b"\x0F"
	elif decimal==16: newbyte=b"\x10"
	elif decimal==17: newbyte=b"\x11"
	elif decimal==18: newbyte=b"\x12"
	elif decimal==19: newbyte=b"\x13"
	elif decimal==20: newbyte=b"\x14"
	elif decimal==21: newbyte=b"\x15"
	elif decimal==22: newbyte=b"\x16"
	elif decimal==23: newbyte=b"\x17"
	elif decimal==24: newbyte=b"\x18"
	elif decimal==25: newbyte=b"\x19"
	elif decimal==26: newbyte=b"\x1A"
	elif decimal==27: newbyte=b"\x1B"
	elif decimal==28: newbyte=b"\x1C"
	elif decimal==29: newbyte=b"\x1D"
	elif decimal==30: newbyte=b"\x1E"
	elif decimal==31: newbyte=b"\x1F"
	elif decimal==32: newbyte=b"\x20"
	elif decimal==33: newbyte=b"\x21"
	elif decimal==34: newbyte=b"\x22"
	elif decimal==35: newbyte=b"\x23"
	elif decimal==36: newbyte=b"\x24"
	elif decimal==37: newbyte=b"\x25"
	elif decimal==38: newbyte=b"\x26"
	elif decimal==39: newbyte=b"\x27"
	elif decimal==40: newbyte=b"\x28"
	elif decimal==41: newbyte=b"\x29"
	elif decimal==42: newbyte=b"\x2A"
	elif decimal==43: newbyte=b"\x2B"
	elif decimal==44: newbyte=b"\x2C"
	elif decimal==45: newbyte=b"\x2D"
	elif decimal==46: newbyte=b"\x2E"
	elif decimal==47: newbyte=b"\x2F"
	elif decimal==48: newbyte=b"\x30"
	elif decimal==49: newbyte=b"\x31"
	elif decimal==50: newbyte=b"\x32"
	elif decimal==51: newbyte=b"\x33"
	elif decimal==52: newbyte=b"\x34"
	elif decimal==53: newbyte=b"\x35"
	elif decimal==54: newbyte=b"\x36"
	elif decimal==55: newbyte=b"\x37"
	elif decimal==56: newbyte=b"\x38"
	elif decimal==57: newbyte=b"\x39"
	elif decimal==58: newbyte=b"\x3A"
	elif decimal==59: newbyte=b"\x3B"
	elif decimal==60: newbyte=b"\x3C"
	elif decimal==61: newbyte=b"\x3D"
	elif decimal==62: newbyte=b"\x3E"
	elif decimal==63: newbyte=b"\x3F"
	elif decimal==64: newbyte=b"\x40"
	elif decimal==65: newbyte=b"\x41"
	elif decimal==66: newbyte=b"\x42"
	elif decimal==67: newbyte=b"\x43"
	elif decimal==68: newbyte=b"\x44"
	elif decimal==69: newbyte=b"\x45"
	elif decimal==70: newbyte=b"\x46"
	elif decimal==71: newbyte=b"\x47"
	elif decimal==72: newbyte=b"\x48"
	elif decimal==73: newbyte=b"\x49"
	elif decimal==74: newbyte=b"\x4A"
	elif decimal==75: newbyte=b"\x4B"
	elif decimal==76: newbyte=b"\x4C"
	elif decimal==77: newbyte=b"\x4D"
	elif decimal==78: newbyte=b"\x4E"
	elif decimal==79: newbyte=b"\x4F"
	elif decimal==80: newbyte=b"\x50"
	elif decimal==81: newbyte=b"\x51"
	elif decimal==82: newbyte=b"\x52"
	elif decimal==83: newbyte=b"\x53"
	elif decimal==84: newbyte=b"\x54"
	elif decimal==85: newbyte=b"\x55"
	elif decimal==86: newbyte=b"\x56"
	elif decimal==87: newbyte=b"\x57"
	elif decimal==88: newbyte=b"\x58"
	elif decimal==89: newbyte=b"\x59"
	elif decimal==90: newbyte=b"\x5A"
	elif decimal==91: newbyte=b"\x5B"
	elif decimal==92: newbyte=b"\x5C"
	elif decimal==93: newbyte=b"\x5D"
	elif decimal==94: newbyte=b"\x5E"
	elif decimal==95: newbyte=b"\x5F"
	elif decimal==96: newbyte=b"\x60"
	elif decimal==97: newbyte=b"\x61"
	elif decimal==98: newbyte=b"\x62"
	elif decimal==99: newbyte=b"\x63"
	elif decimal==100: newbyte=b"\x64"
	elif decimal==101: newbyte=b"\x65"
	elif decimal==102: newbyte=b"\x66"
	elif decimal==103: newbyte=b"\x67"
	elif decimal==104: newbyte=b"\x68"
	elif decimal==105: newbyte=b"\x69"
	elif decimal==106: newbyte=b"\x6A"
	elif decimal==107: newbyte=b"\x6B"
	elif decimal==108: newbyte=b"\x6C"
	elif decimal==109: newbyte=b"\x6D"
	elif decimal==110: newbyte=b"\x6E"
	elif decimal==111: newbyte=b"\x6F"
	elif decimal==112: newbyte=b"\x70"
	elif decimal==113: newbyte=b"\x71"
	elif decimal==114: newbyte=b"\x72"
	elif decimal==115: newbyte=b"\x73"
	elif decimal==116: newbyte=b"\x74"
	elif decimal==117: newbyte=b"\x75"
	elif decimal==118: newbyte=b"\x76"
	elif decimal==119: newbyte=b"\x77"
	elif decimal==120: newbyte=b"\x78"
	elif decimal==121: newbyte=b"\x79"
	elif decimal==122: newbyte=b"\x7A"
	elif decimal==123: newbyte=b"\x7B"
	elif decimal==124: newbyte=b"\x7C"
	elif decimal==125: newbyte=b"\x7D"
	elif decimal==126: newbyte=b"\x7E"
	elif decimal==127: newbyte=b"\x7F"
	elif decimal==128: newbyte=b"\x80"
	elif decimal==129: newbyte=b"\x81"
	elif decimal==130: newbyte=b"\x82"
	elif decimal==131: newbyte=b"\x83"
	elif decimal==132: newbyte=b"\x84"
	elif decimal==133: newbyte=b"\x85"
	elif decimal==134: newbyte=b"\x86"
	elif decimal==135: newbyte=b"\x87"
	elif decimal==136: newbyte=b"\x88"
	elif decimal==137: newbyte=b"\x89"
	elif decimal==138: newbyte=b"\x8A"
	elif decimal==139: newbyte=b"\x8B"
	elif decimal==140: newbyte=b"\x8C"
	elif decimal==141: newbyte=b"\x8D"
	elif decimal==142: newbyte=b"\x8E"
	elif decimal==143: newbyte=b"\x8F"
	elif decimal==144: newbyte=b"\x90"
	elif decimal==145: newbyte=b"\x91"
	elif decimal==146: newbyte=b"\x92"
	elif decimal==147: newbyte=b"\x93"
	elif decimal==148: newbyte=b"\x94"
	elif decimal==149: newbyte=b"\x95"
	elif decimal==150: newbyte=b"\x96"
	elif decimal==151: newbyte=b"\x97"
	elif decimal==152: newbyte=b"\x98"
	elif decimal==153: newbyte=b"\x99"
	elif decimal==154: newbyte=b"\x9A"
	elif decimal==155: newbyte=b"\x9B"
	elif decimal==156: newbyte=b"\x9C"
	elif decimal==157: newbyte=b"\x9D"
	elif decimal==158: newbyte=b"\x9E"
	elif decimal==159: newbyte=b"\x9F"
	elif decimal==160: newbyte=b"\xA0"
	elif decimal==161: newbyte=b"\xA1"
	elif decimal==162: newbyte=b"\xA2"
	elif decimal==163: newbyte=b"\xA3"
	elif decimal==164: newbyte=b"\xA4"
	elif decimal==165: newbyte=b"\xA5"
	elif decimal==166: newbyte=b"\xA6"
	elif decimal==167: newbyte=b"\xA7"
	elif decimal==168: newbyte=b"\xA8"
	elif decimal==169: newbyte=b"\xA9"
	elif decimal==170: newbyte=b"\xAA"
	elif decimal==171: newbyte=b"\xAB"
	elif decimal==172: newbyte=b"\xAC"
	elif decimal==173: newbyte=b"\xAD"
	elif decimal==174: newbyte=b"\xAE"
	elif decimal==175: newbyte=b"\xAF"
	elif decimal==176: newbyte=b"\xB0"
	elif decimal==177: newbyte=b"\xB1"
	elif decimal==178: newbyte=b"\xB2"
	elif decimal==179: newbyte=b"\xB3"
	elif decimal==180: newbyte=b"\xB4"
	elif decimal==181: newbyte=b"\xB5"
	elif decimal==182: newbyte=b"\xB6"
	elif decimal==183: newbyte=b"\xB7"
	elif decimal==184: newbyte=b"\xB8"
	elif decimal==185: newbyte=b"\xB9"
	elif decimal==186: newbyte=b"\xBA"
	elif decimal==187: newbyte=b"\xBB"
	elif decimal==188: newbyte=b"\xBC"
	elif decimal==189: newbyte=b"\xBD"
	elif decimal==190: newbyte=b"\xBE"
	elif decimal==191: newbyte=b"\xBF"
	elif decimal==192: newbyte=b"\xC0"
	elif decimal==193: newbyte=b"\xC1"
	elif decimal==194: newbyte=b"\xC2"
	elif decimal==195: newbyte=b"\xC3"
	elif decimal==196: newbyte=b"\xC4"
	elif decimal==197: newbyte=b"\xC5"
	elif decimal==198: newbyte=b"\xC6"
	elif decimal==199: newbyte=b"\xC7"
	elif decimal==200: newbyte=b"\xC8"
	elif decimal==201: newbyte=b"\xC9"
	elif decimal==202: newbyte=b"\xCA"
	elif decimal==203: newbyte=b"\xCB"
	elif decimal==204: newbyte=b"\xCC"
	elif decimal==205: newbyte=b"\xCD"
	elif decimal==206: newbyte=b"\xCE"
	elif decimal==207: newbyte=b"\xCF"
	elif decimal==208: newbyte=b"\xD0"
	elif decimal==209: newbyte=b"\xD1"
	elif decimal==210: newbyte=b"\xD2"
	elif decimal==211: newbyte=b"\xD3"
	elif decimal==212: newbyte=b"\xD4"
	elif decimal==213: newbyte=b"\xD5"
	elif decimal==214: newbyte=b"\xD6"
	elif decimal==215: newbyte=b"\xD7"
	elif decimal==216: newbyte=b"\xD8"
	elif decimal==217: newbyte=b"\xD9"
	elif decimal==218: newbyte=b"\xDA"
	elif decimal==219: newbyte=b"\xDB"
	elif decimal==220: newbyte=b"\xDC"
	elif decimal==221: newbyte=b"\xDD"
	elif decimal==222: newbyte=b"\xDE"
	elif decimal==223: newbyte=b"\xDF"
	elif decimal==224: newbyte=b"\xE0"
	elif decimal==225: newbyte=b"\xE1"
	elif decimal==226: newbyte=b"\xE2"
	elif decimal==227: newbyte=b"\xE3"
	elif decimal==228: newbyte=b"\xE4"
	elif decimal==229: newbyte=b"\xE5"
	elif decimal==230: newbyte=b"\xE6"
	elif decimal==231: newbyte=b"\xE7"
	elif decimal==232: newbyte=b"\xE8"
	elif decimal==233: newbyte=b"\xE9"
	elif decimal==234: newbyte=b"\xEA"
	elif decimal==235: newbyte=b"\xEB"
	elif decimal==236: newbyte=b"\xEC"
	elif decimal==237: newbyte=b"\xED"
	elif decimal==238: newbyte=b"\xEE"
	elif decimal==239: newbyte=b"\xEF"
	elif decimal==240: newbyte=b"\xF0"
	elif decimal==241: newbyte=b"\xF1"
	elif decimal==242: newbyte=b"\xF2"
	elif decimal==243: newbyte=b"\xF3"
	elif decimal==244: newbyte=b"\xF4"
	elif decimal==245: newbyte=b"\xF5"
	elif decimal==246: newbyte=b"\xF6"
	elif decimal==247: newbyte=b"\xF7"
	elif decimal==248: newbyte=b"\xF8"
	elif decimal==249: newbyte=b"\xF9"
	elif decimal==250: newbyte=b"\xFA"
	elif decimal==251: newbyte=b"\xFB"
	elif decimal==252: newbyte=b"\xFC"
	elif decimal==253: newbyte=b"\xFD"
	elif decimal==254: newbyte=b"\xFE"
	elif decimal==255: newbyte=b"\xFF"
	return newbyte

def t2b(some_string):
	# Allocate an empty byte(s) string.
	new_byte_string=b""
	# Use the loop to build the byte(s) string from a standard string.
	for n in range(0,len(some_string),1):
		# Convert each _character_ in the string to a decimal number.
		decimal_number=ord(some_string[n])
		# Call the "d2b()" above function.
		d2b_character=d2b(decimal_number)
		# Build the byte(s) string one character at a time.
		new_byte_string=new_byte_string+d2b_character
	# The complete byte(s) string has now been converted.
	return new_byte_string

def c2b(some_char):
	decimal_number = ord(some_char)
	d2b_character = d2b(decimal_number)
	return d2b_character

